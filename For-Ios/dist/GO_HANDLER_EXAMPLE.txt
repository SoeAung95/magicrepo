// Example Go handler for /api/chat (net/http). Replace main and integrate into your Go project.
package main

import (
		"encoding/json"
		"io"
		"log"
		"net/http"
		"os"
		"bytes"
)

type ChatRequest struct {
		Message string `json:"message"`
}

type OpenAIChoice struct {
		Message struct {
				Content string `json:"content"`
		} `json:"message"`
}

type OpenAIResponse struct {
		Choices []OpenAIChoice `json:"choices"`
}

func chatHandler(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
				http.Error(w, "method not allowed", http.StatusMethodNotAllowed)
				return
		}

		var req ChatRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
				http.Error(w, "bad request", http.StatusBadRequest)
				return
		}

		openaiKey := os.Getenv("OPENAI_API_KEY")
		if openaiKey == "" {
				http.Error(w, "server misconfigured: missing OPENAI_API_KEY", http.StatusInternalServerError)
				return
		}

		payload := map[string]interface{}{
				"model": "gpt-4o-mini",
				"messages": []map[string]string{
						{"role": "user", "content": req.Message},
				},
				"max_tokens": 150,
		}
		payloadBytes, _ := json.Marshal(payload)

		client := &http.Client{}
		reqOpenAI, _ := http.NewRequest("POST", "https://api.openai.com/v1/chat/completions", bytes.NewReader(payloadBytes))
		reqOpenAI.Header.Set("Content-Type", "application/json")
		reqOpenAI.Header.Set("Authorization", "Bearer " + openaiKey)

		resp, err := client.Do(reqOpenAI)
		if err != nil {
				log.Println("openai request error:", err)
				http.Error(w, "upstream error", http.StatusBadGateway)
				return
		}
		defer resp.Body.Close()
		body, _ := io.ReadAll(resp.Body)

		if resp.StatusCode != http.StatusOK {
				log.Println("openai returned non-200:", resp.StatusCode, string(body))
				http.Error(w, "upstream error", http.StatusBadGateway)
				return
		}

		var oaResp OpenAIResponse
		if err := json.Unmarshal(body, &oaResp); err != nil {
				log.Println("openai response parse error:", err)
				http.Error(w, "upstream error", http.StatusBadGateway)
				return
		}

		reply := ""
		if len(oaResp.Choices) > 0 {
				reply = oaResp.Choices[0].Message.Content
		} else {
				reply = "No reply from model"
		}

		json.NewEncoder(w).Encode(map[string]string{"reply": reply})
}

// In main, hook this handler e.g. http.HandleFunc("/api/chat", chatHandler)
